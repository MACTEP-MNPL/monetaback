import {db} from "../../index.js"
import {Composer} from "grammy"
import {getApplicationClosedMessage} from "../messages/messages.js"
import {createNewChat} from "../../server/chat.js"
import {adminKeyboard} from "../keyboards/adminKeyboard.js"
import {isAdmin} from "../utils/isAdmin.js"
import {ownerKeyboard} from "../keyboards/ownerKeyboard.js"
import {isOwner} from "../utils/isOwner.js"

export const commands = new Composer()

commands.command('start', async (ctx) => {

    if(!(await isAdmin(ctx))) {
        await ctx.reply("–ü—Ä–∏–≤–µ—Ç, —è –ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç <b>monetazone</b>! –†–∞–Ω—å—à–µ —è –±—ã–ª —Ä–æ–±–æ—Ç–æ–º –ø—ã–ª–µ—Å–æ—Å–æ–º, —Ç–µ–ø–µ—Ä—å —è —Å—Ç–∞–∂–∏—Ä—É—é—Å—å –∑–¥–µ—Å—å. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –µ—â—ë —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —á—Ç–æ –±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ. \n\n‚è≥ <b>–û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –≤ —á–∞—Ç–µ, –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è.</b>", {parse_mode: 'HTML'})
        return 
    }

    await ctx.reply("üõ† –ü–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞", {reply_markup: adminKeyboard})
})

commands.command('owner', async (ctx) => {
    if(!(await isOwner(ctx))) {
        return 
    }

    await ctx.reply("üòé –ü–∞–Ω–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞", {reply_markup: ownerKeyboard})
})

commands.command('help', async (ctx) => {
    if(!(await isAdmin(ctx))) {
        return
    }

    await ctx.reply(
        'üÜò –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:' +
        '\n' +
        '\n<b>–ö–æ–º–∞–Ω–¥—ã –≤ –±–æ—Ç–µ:</b>' +
        '\n/id - –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π telegram id' +
        '\n/ban {id} - –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' +
        '\n/manager {id} - –°–¥–µ–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º' +
        '\n/unban {id} - –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' +
        '\n/start - –ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞' +
        '\n/owner - –ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é –≤–ª–∞–¥–µ–ª—å—Ü–∞' +

        '\n/help - –ü–æ–ª—É—á–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ' +


        '\n' +
        '\n<b>–ö–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ:</b>' +
        '\n/close - –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É' +
        '\n/new - –í–Ω–µ—Å—Ç–∏ —á–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö' +
        '\n/admin - –°—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —á–∞—Ç–µ', 
        {parse_mode: 'HTML'}
    ) 
})

commands.command('manager', async (ctx) => {
    try {

        if (!(await isOwner(ctx))) {
            return
        }

        const userId = ctx.message.text.split(' ')[1]
        if (!userId) {
            await ctx.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /manager <user_id>")
            return
        }

        const [user] = await db.execute(
            'SELECT * FROM users WHERE id = ?',
            [userId]
        )

        if (!user || user.length === 0) {
            await db.execute(
                'INSERT INTO users (id, role, created_at) VALUES (?, ?, ?)',
                [userId, 'manager', new Date()]
            )
        } else {
            await db.execute(
                'UPDATE users SET role = ? WHERE id = ?',
                ['manager', userId]
            )
        }

        await ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–∞–∑–Ω–∞—á–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.`)
    } catch (error) {
        console.error('Error in /manager command:', error)
        await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")
    }
})

commands.command('id', async (ctx) => {
    await ctx.reply(`–í–∞—à ID: <code>${ctx.from.id}</code>`, {parse_mode: 'HTML'})
})

commands.command('new', async (ctx) => {
    try {

        await createNewChat(ctx)
    } catch (error) {
        console.error('Error in /new command:', error)
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–∞—Ç–∞.")
    }
})

commands.command('ban', async (ctx) => {
    try {
        const [admin] = await db.execute(
            'SELECT role FROM users WHERE id = ?',
            [ctx.from.id]
        )

        if (!admin || !['owner', 'manager'].includes(admin[0].role)) {
            return
        }

        const userId = ctx.message.text.split(' ')[1]
        if (!userId) {
            await ctx.reply("–ù–µ–∑–∞–±—ã–≤–∞–π—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /ban <user_id>")
            return
        }

        await db.execute(
            'UPDATE users SET is_banned = TRUE WHERE id = ?',
            [userId]
        )

        await ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω.`)
    } catch (error) {
        console.error('Error in /ban command:', error)
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
    }
})

commands.command('unban', async (ctx) => {
    try {
        const [admin] = await db.execute(
            'SELECT role FROM users WHERE id = ?',
            [ctx.from.id]
        )

        if (!admin || !['owner', 'manager'].includes(admin[0].role)) {
            return
        }

        const userId = ctx.message.text.split(' ')[1]
        if (!userId) {
            await ctx.reply("–ù–µ–∑–∞–±—ã–≤–∞–π—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /unban <user_id>")
            return
        }

        await db.execute(
            'UPDATE users SET is_banned = FALSE WHERE id = ?',
            [userId]
        )

        await ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω.`)
    } catch (error) {
        console.error('Error in /unban command:', error)
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
    }
})

commands.command('close', async (ctx) => {
    try {
        // Check if user is manager or owner
        const [admin] = await db.execute(
            'SELECT role FROM users WHERE id = ?',
            [ctx.from.id]
        )

        if (!admin || !['owner', 'manager'].includes(admin[0].role)) {
            return
        }

        // Get chat's application
        const [applications] = await db.execute(
            'SELECT id, status FROM applications WHERE chat_id = ?',
            [ctx.chat.id]
        )

        if (!applications || applications.length === 0) {
            await ctx.reply("‚ùå –≠—Ç–æ—Ç —á–∞—Ç –Ω–µ —Å–≤—è–∑–∞–Ω —Å –∑–∞—è–≤–∫–æ–π.")
            return
        }

        const application = applications[applications.length - 1]

        if (application.status === 'completed') {
            await ctx.reply("‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.")
            return
        }

        // Update application status using the correct ENUM value
        await db.execute(
            'UPDATE applications SET status = "completed" WHERE id = ?',
            [application.id]
        )

        await db.execute('UPDATE application_timestamps SET completed_at = ? WHERE application_id = ?', [new Date(), application.id])


        // Send closure message
        const message = getApplicationClosedMessage()
        await ctx.reply(message.text, { parse_mode: 'HTML' })

        // Update chat title to indicate closure
        const paddedId = String(application.id).padStart(6, '0')
        await ctx.api.setChatTitle(ctx.chat.id, `ü§ù monetazone | ${paddedId}`)

    } catch (error) {
        console.error('Error in /close command:', error)
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞—è–≤–∫–∏.")
    }
})

commands.command('admin', async (ctx) => {
    try {
        // Check if command sender is owner
        const [admin] = await db.execute(
            'SELECT role FROM users WHERE id = ?',
            [ctx.from.id]
        )

        if (!(await isAdmin(ctx))) {
            return
        }

        const userId = ctx.from.id

        await ctx.api.promoteChatMember(ctx.chat.id, userId, {
            can_manage_chat: true,
            can_delete_messages: true,
            can_manage_video_chats: true,
            can_restrict_members: true,
            can_promote_members: true,
            can_change_info: true,
            can_invite_users: true,
            can_pin_messages: true,
        })

        await ctx.api.setChatAdministratorCustomTitle(ctx.chat.id, userId, "–º–µ–Ω–µ–¥–∂–µ—Ä")

        await ctx.reply("‚úÖ –í—ã —Å—Ç–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞.")
    } catch (error) {
        console.error('Error in /admin command:', error)
        await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç–µ.")
    }
})